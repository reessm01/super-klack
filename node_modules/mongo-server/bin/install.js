"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const path = require("path");
const fs = require("fs-extra-promise");
const child_process_1 = require("child_process");
function modeNum(m) {
    switch (typeof m) {
        case 'number':
            return m;
        case 'string':
            return parseInt(m, 8);
    }
}
(function install() {
    return __awaiter(this, void 0, void 0, function* () {
        if (os.type() === 'Linux')
            child_process_1.spawn('chmod', ['+x', '/usr/lib/node_modules/mongo-server/libs/**/*']);
        let dirs = [
            path.join(__dirname, '../libs/server/mongod'),
            path.join(__dirname, '../libs/server/mongorestore')
        ];
        let started = dirs.length;
        if (os.type() === 'Linux')
            for (let dir of dirs)
                child_process_1.spawn('chmod', ['+x', dir]);
        for (let dir of dirs)
            yield fs.chmodAsync(dir, modeNum(777));
        return 'Its ok';
    });
})().then().catch(error => { throw error; });
